"""Professional markdown report generation."""

from typing import List
from ..core.models import ReviewComment, ReviewSummary


class MarkdownReporter:
    """Professional markdown report generator."""
    
    def generate_report(self, code_snippet: str, comments: List[ReviewComment], 
                       language: str, review_summary: ReviewSummary) -> str:
        """Generate comprehensive markdown report."""
        
        report = []
        
        # Header
        report.append("# 🤖 Empathetic Code Review Report")
        report.append("")
        report.append(f"**Generated:** {review_summary.timestamp}")
        report.append(f"**Language:** {language.title()}")
        report.append(f"**Comments Analyzed:** {review_summary.total_comments}")
        report.append("")
        
        # Code section
        report.append("## 📝 Code Under Review")
        report.append("")
        report.append(f"```{language}")
        report.append(code_snippet)
        report.append("```")
        report.append("")
        
        # Overview
        report.append("## 📊 Review Overview")
        report.append("")
        report.append(f"**Focus Areas:** {review_summary.primary_focus_areas}")
        severity_dist = ', '.join([f'{sev.title()}: {count}' for sev, count in review_summary.severity_distribution.items()])
        report.append(f"**Severity Distribution:** {severity_dist}")
        report.append("")
        
        # Process comments
        for i, comment in enumerate(comments, 1):
            severity_emoji = {'critical': '🚨', 'high': '⚠️', 'medium': '💡', 'low': '✨'}.get(comment.severity.value, '💡')
            category_emoji = {'performance': '⚡', 'readability': '📖', 'convention': '📏', 'logic': '🧠', 'security': '🔒', 'maintainability': '🔧'}.get(comment.category.value, '🔍')
            
            report.append("---")
            report.append(f"### {severity_emoji} Analysis {i}: {comment.category.value.title()} Enhancement")
            report.append("")
            report.append(f"**Original Feedback:** *\"{comment.original}\"*")
            report.append("")
            
            # Confidence and impact
            confidence_bar = "🟩" * int(comment.confidence * 5) + "⬜" * (5 - int(comment.confidence * 5))
            impact_indicator = {"high": "🔴", "medium": "🟡", "low": "🟢"}.get(comment.impact_level.value, "🟡")
            
            report.append(f"**Analysis Confidence:** {confidence_bar} ({comment.confidence:.1f}/1.0)")
            report.append(f"**Impact Level:** {impact_indicator} {comment.impact_level.value.title()}")
            report.append("")
            
            report.append(f"#### {category_emoji} Positive Rephrasing")
            report.append(comment.positive_rephrase)
            report.append("")
            
            report.append("#### 🎯 The 'Why' Behind This Suggestion")
            report.append(comment.explanation)
            report.append("")
            
            report.append("#### 💻 Suggested Implementation")
            report.append(f"```{language}")
            report.append(comment.code_suggestion)
            report.append("```")
            report.append("")
            
            if comment.learning_objective:
                report.append("#### 🎓 Key Learning Opportunity")
                report.append(comment.learning_objective)
                report.append("")
            
            if comment.resources:
                report.append("#### 📚 Helpful Resources")
                for resource in comment.resources:
                    name = self._extract_resource_name(resource)
                    report.append(f"- [{name}]({resource})")
                report.append("")
        
        # Summary
        report.append("---")
        report.append("")
        report.append(self._generate_summary(review_summary))
        
        # Footer
        report.append("")
        report.append("---")
        report.append("*Generated by Empathetic Code Reviewer - Transforming feedback into growth opportunities* ✨")
        
        return "\n".join(report)
    
    def _extract_resource_name(self, url: str) -> str:
        """Extract meaningful name from URL."""
        try:
            name = url.split('/')[-1]
            if not name:
                name = url.split('/')[-2]
            
            name = name.replace('-', ' ').replace('_', ' ').replace('.html', '')
            name = ' '.join(word.capitalize() for word in name.split())
            
            if 'pep8.org' in url:
                return "PEP 8 Style Guide"
            elif 'docs.python.org' in url:
                return f"Python Documentation: {name}"
            elif 'developer.mozilla.org' in url:
                return f"MDN: {name}"
            
            return name or "Documentation"
        except:
            return "Related Documentation"
    
    def _generate_summary(self, review_summary: ReviewSummary) -> str:
        """Generate holistic summary."""
        return f"""## 🎯 Code Review Summary

Excellent work on this {review_summary.language} code! The {review_summary.total_comments} suggestions above represent fantastic learning opportunities that will help you level up as a developer. I can see you have a solid foundation, and these improvements will take your skills to the next level.

The feedback we've covered - focusing on {review_summary.primary_focus_areas} - represents exactly the kind of attention to detail that separates good developers from great ones. Each suggestion is designed to help you write more maintainable, performant, and readable code that your future teammates (and future you!) will appreciate.

Remember, receiving thorough code review feedback is actually a sign that your team is invested in your growth. These aren't criticisms - they're stepping stones to becoming a more skilled engineer. Take your time implementing these changes, experiment with the suggestions, and don't hesitate to ask questions if anything needs clarification.

You're clearly on an upward trajectory, and I'm excited to see how these improvements will enhance your development skills. Keep up the great work! 🚀

*"The best developers are those who never stop learning and growing."*"""
